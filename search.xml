<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用Travis CI自动化部署博客</title>
      <link href="/20200324/use-travis-ci-with-hexo/"/>
      <url>/20200324/use-travis-ci-with-hexo/</url>
      
        <content type="html"><![CDATA[<blockquote><p>上一篇文章解决了写文章时候的各种琐碎的事情的痛点，这篇我们来解决一下剩下来的痛点：文章的部署，也就是环境搭建和一系列<code>hexo</code>相关操作。</p><p>同样先想一下我们的需求：</p><ul><li>不需要每次写完文章都用一系列<code>hexo</code>操作来部署</li><li>在新的环境中能快速修改并提交部署，比如github上直接修改</li></ul><p>也就是说，我们需要一个平台来帮我们监控代码提交，然后自动执行<code>hexo</code>的一系列操作，我们只需要提交<code>.md</code>文件到仓库即可。</p><p>这个需求就是所谓的持续集成(Continuous Integration)，简称CI</p></blockquote><p>那么接下来，我们就研究一下怎么给我们的博客用上CI来简化我们的部署操作。</p><a id="more"></a><h2 id="仓库构成"><a href="#仓库构成" class="headerlink" title="仓库构成"></a>仓库构成</h2><p>为了避免混乱，先说一下我们目前的仓库构成。首先，我们为了白嫖，并且主域名访问，所以创建了一个github_username.github.io的同名仓库，这个仓库下的master分支会被映射到外网访问。</p><p>这个仓库目前有3个分支：<code>master</code>，<code>hexo</code>，<code>img</code></p><ul><li>hexo分支：我们存放hexo相关的配置，文章的仓库，也是我们下面使用CI主要用到的仓库。</li><li>master分支：使用hexo生成，部署到的分支，也是github pages用来访问的分支。</li><li>img分支：<a href="https://chaosysama.github.io/20200318/use-typora-and-picgo-write-blog">上篇文章</a> 中创建的图床分支。</li></ul><h2 id="Travis-CI"><a href="#Travis-CI" class="headerlink" title="Travis CI"></a>Travis CI</h2><p>提到CI，市面上有各种类似的产品，如果大家有兴趣可以自行研究一下。这里主要介绍一下<a href="https://travis-ci.org/" target="_blank" rel="noopener">Travis CI</a>，它的好处是，可以关联github仓库，很方便的设置需要持续集成的仓库。并且配置简单易懂，界面清爽，最重要的是免费！<del>对，又可以白嫖了</del></p><h4 id="关联github账号"><a href="#关联github账号" class="headerlink" title="关联github账号"></a>关联github账号</h4><p>打开Travis CI的页面，点击Sign Up，就可以授权关联自己的github账号，之后会有一段时间用来拉取你的所有仓库，耐心等待即可。</p><h4 id="准备travis用的github-token"><a href="#准备travis用的github-token" class="headerlink" title="准备travis用的github token"></a>准备travis用的github token</h4><p>在github页面，点击头像，选择Settings -&gt; Developer settings -&gt; Personal access token -&gt; Generate new token。在Note栏中填写travis_ci用来标记这个token是给travis用的，下面的权限选择repo的所有就可以，其他都不用选择，travis也用不到（越少的权限越安全）。</p><p><img data-src="https://raw.githubusercontent.com/ChaosySama/ChaosySama.github.io/img/image-20200324112117866.png" alt="image-20200324112117866"></p><p>之后就是生成token，复制页面中的token备用（注意，token只显示一次，刷新之后就看不到了，不过如果忘记或者没有复制，可以点击Regenerate token来重新生成）</p><h4 id="travis中关联仓库-amp-设置"><a href="#travis中关联仓库-amp-设置" class="headerlink" title="travis中关联仓库&amp;设置"></a>travis中关联仓库&amp;设置</h4><p>在travis的dashboard页面中，点击左侧<code>+</code>号，关联自己的仓库。在需要的仓库右侧开启即可。开启后点击旁边的<code>Settings</code>按钮。</p><p>在<code>General</code>里把<code>Build pushed pull requests</code>关闭，不关也可以，这个用不上。</p><p>在<code>Environment Variables</code>里定义以下几个变量，方便之后配置使用：</p><ul><li>GIT_REPO_TOKEN: 上面生成的token</li><li>GIT_NAME: github账号的用户名</li><li>GIT_EMAIL: github账号的邮箱</li><li>GIT_REPO: 需要操作的仓库的地址，用来<code>git clone</code>使用的，在哪找就不多说了，注意需要把前面的<code>http://</code>删除</li></ul><p>这里的Branch都默认<code>All branches</code>即可，后面<code>DISPLAY VALUE IN BUILD LOG</code>保持关闭状态，这样不会有泄露信息的风险，之后点击<code>Add</code>按钮添加变量。</p><p><img data-src="https://raw.githubusercontent.com/ChaosySama/ChaosySama.github.io/img/image-20200324135440300.png" alt="image-20200324135440300"></p><h4 id="hexo分支的配置"><a href="#hexo分支的配置" class="headerlink" title="hexo分支的配置"></a>hexo分支的配置</h4><p>travis需要根据<code>.travis.yml</code>文件来配置环境和执行我们需要的操作。</p><p>于是我们可以在仓库的<code>hexo</code>分支的根目录，创建一个配置文件<code>.travis.yml</code>，内容如下（可参考）：</p><pre class=" language-yml"><code class="language-yml">language: node_js # 指定语言环境node_js:  - 10 # use nodejs v10 LTSdist: trusty # 指定系统版本。trusty 是指 Ubuntu 14.04 发行版的名称sudo: false # 是否需要 sudo 权限cache: npm # 是否缓存npm相关文件，建议缓存branches:  only:  - hexo # 表示只在hexo分支监控和执行travis构建before_install:  - export TZ='Asia/Shanghai' # 设置时区，配合下面的commit msg中的时间install:  - npm install # script执行前的操作，这里用来根据package.json安装环境依赖script:  - hexo clean  - hexo generateafter_success:  - git clone https://${GIT_REPO} .deploy_git  - cd .deploy_git  - git checkout master  - cd ../  - mv .deploy_git/.git/ ./public/   # 这一步之前的操作是为了保留master分支的提交记录，不然每次git init的话只有1条commit  - cd ./public#   - git init  - git config user.name "${GIT_NAME}"  - git config user.email "${GIT_EMAIL}"  - git add .  - git commit -m "Travis CI Auto Builder at `date +"%Y%m%d %H:%M"`"  - git push --force --quiet "https://${GIT_REPO_TOKEN}@${GIT_REPO}" master:master# deploy:#   provider: master#   skip-cleanup: true#   github-token: $GIT_REPO_TOKEN#   keep-history: true#   on:#     branch: hexo#   local-dir: publicnotifications:  email: true</code></pre><p>下面解释一下文件中注释掉的部分：</p><ol><li><p>deploy配置项</p><pre class=" language-yml"><code class="language-yml"> deploy:   provider: gh-pages   skip-cleanup: true   github-token: $GIT_REPO_TOKEN   keep-history: true   on:     branch: hexo   local-dir: public</code></pre><p>这个是一开始踩坑的时候官网推荐的配置<code>yml</code>文件的方法，但是经过验证，这个只适用于非同名根仓库（即仓库名<span style="color: red">不是</span>github_username.github.io的仓库），而我们这个不属于这个范围，所以不能用这个配置项。如果是非同名仓库来做博客的话，需要在仓库的设置中开启github page，然后再用上面的配置即可。</p><p>我们的仓库属于同名仓库，所以得用after_success方法，模拟手动push的方式来执行。</p></li><li><p>after_success中的<code>- git init</code></p><p>如果仓库的提交记录看起来不干净，不想继承之前的提交记录 <del>想重新做人</del> 怎么办？就可以用这条来从头开始你的commit记录。</p><p>这里如果需要使用的话，需要取消注释并且将下面几行注释掉:</p><pre class=" language-yml"><code class="language-yml">  - cd ../  - mv .deploy_git/.git/ ./public/  - cd ./public</code></pre></li></ol><h2 id="提交测试"><a href="#提交测试" class="headerlink" title="提交测试"></a>提交测试</h2><p><code>.travis.yml</code>文件配置完后，就可以push一波，看看travis那边的执行情况了。</p><pre class=" language-shell"><code class="language-shell">git add .travis.ymlgit commit -m 'test'git push</code></pre><p>多刷新几下可以看到，已经在构建中了。</p><p><img data-src="https://raw.githubusercontent.com/ChaosySama/ChaosySama.github.io/img/image-20200324142319011.png" alt="image-20200324142319011"></p><p>如果构建没什么问题的话，大概1分钟不到，就构建完了，构建成功或者失败都会发邮件到邮箱中。</p><p>如果构建失败，可以查看Current选项卡下方的<code>Job log</code>，会有报错信息。</p><p>成功之后，去仓库的master分支，就可以看到commit记录中多了刚刚构建的一条。</p><p>大功告成。</p><h2 id="travis接入后的使用"><a href="#travis接入后的使用" class="headerlink" title="travis接入后的使用"></a>travis接入后的使用</h2><p>既然travis已经成功接入了我们的博客，那么以后我们写完文章就可以更方便了，下面是大概的流程：</p><pre class=" language-shell"><code class="language-shell">hexo n test-travis # 使用hexo n是为了创建hexo相关的头部，有时间，类别等信息可以自己编辑typora source/_posts/test-travis.md # 用typora一顿写git add .git commit -m 'new test-travis.md' # 这里的commit msg是提交到hexo分支的git push</code></pre><p>然后就可以坐等邮件通知，之后刷新几次博客页面就能看到刚才的文章已经发布上去了。</p><p>大家快试试看！</p>]]></content>
      
      
      <categories>
          
          <category> Tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
            <tag> travis </tag>
            
            <tag> ci </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Typora+图床工具PicGo写博客</title>
      <link href="/20200318/use-typora-and-picgo-write-blog/"/>
      <url>/20200318/use-typora-and-picgo-write-blog/</url>
      
        <content type="html"><![CDATA[<blockquote><p>之前介绍了怎么使用<code>github</code>+<code>hexo</code>搭建个人白嫖博客的文章：<a href="https://chaosysama.github.io/20190914/use-hexo-build-blog/">Hexo 搭建个人博客</a></p><p>当时是一腔热情，可是写了几篇博客之后发现了许多问题，比如：</p><ul><li>每次写文章都要<code>hexo n</code>，<code>hexo g</code>，<code>hexo d</code>各种代码敲来敲去(这就是<code>&#39;hexo cli&#39;</code>)才能发布到<code>github</code>上去。</li><li>因为上述原因，需要<code>vim</code>或<code>vscode</code>或其他文本编辑器书写<code>markdown</code>文章，然后用<code>hexo cli</code>操作，虽然<code>vscode</code>有<code>markdown</code>预览插件，但始终不是写作的感觉，更像是敲代码，体验不够好。</li><li>写文章的时候，有时候会想加点配图，网上找的图片可能会出现无法外链的情况，有时候需要的配图是自己屏幕上的截图等等，这些加大了写作的难度，为了一张图片搞得很麻烦，也容易打断创作思路(本人写作白痴, 语体教, 你们看我文章也能感受到, 请多包涵)。</li><li>……</li></ul><p>基于以上种种问题，消磨了文章创作的热情，就一鸽再鸽了。</p><p>那么从这篇文章开始，会陆续的针对以上痛点，慢慢优化我的博客，大家也可以借鉴，我会努力踩坑，然后填平了写出来的。</p><p>这篇文章解决的问题就是最直接的，关乎写作流畅度的问题，这也是极大提高创作信心的一步！<del>你看我都不鸽了</del></p></blockquote><a id="more"></a><p>温馨提示：太长不看版可以跳转到最后的<a href="#con">总结</a></p><h2 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h2><p>首先介绍一下<a href="https://www.typora.io" target="_blank" rel="noopener">Typora</a>，大家从官网就可以看出<code>Typora</code>的逼格有点高，即写即渲染，功能强大，小巧轻便，是我喜欢的极简风格，实际体验过程中也证实，确实写作起来很舒服，很容易让自己有一种沉浸式写作的快感。也明白了为什么网上很多人推崇它的原因。<del>我也无脑粉了！</del>它还有个打字机模式，这个虽然很不习惯，但是逼格真的高，大家可以一试。</p><p>所以，既然大家都要用<code>markdown</code>写作，不妨使用这款神器。另外，它的一个重要的功能，也是这篇文章的核心，也是不得不推荐它的主要原因，这个不知道别的编辑器有没有，不过应该没有<code>Typora</code>体验这么好。</p><p>这个重要的功能下文会结合别的工具介绍。</p><h2 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h2><p>上面介绍完了写作工具，接下来介绍一下图床，众所周知，为了避免开头说的，图片防外链，图片地址失效，找不到网络图片，使用本地截图等等原因，一个好的图床是必须的。</p><p>图床，顾名思义就是图片 <del>睡觉</del> 保管的地方。上面提到的众多问题的最佳解决方案是什么？当然就是 <del>让别人帮你</del> 有一个自己可控的图床。</p><p>那么问题又来了，图床和博客一样，之前的做法都是找个云服务器搭建起来提供资源外链，现在我们博客白嫖了，图床能不能也白嫖呢？好消息好消息，图床可以白嫖啦！而且就在<code>github</code>白嫖，没错！我们可以把博客和图床放在一起管理！</p><blockquote><p> 你只要把图片保存下来，上传到<code>github</code>仓库，就会有图片的外链出来供你使用，是不是很简单！</p></blockquote><p>上面这句话是废话，大部分人都想得到，只是和博客一样，敲代码管理，我们是不喜欢的。更何况还要结合写作文章，想想就难。但这个就是下面介绍解决方案的原理，虽然不重要，哈哈哈，我们继续。</p><blockquote><p>补充一下，你也可以选择其他的图床(<code>sm.ms</code>,<code>imgur</code>,<code>各种云图床</code>等等)，免费的也有很多，不过要注册和管理啥的，我这边优选<code>github</code>，因为可以和博客一起管理。<del>要死一起死</del></p></blockquote><h2 id="PicGo"><a href="#PicGo" class="headerlink" title="PicGo"></a>PicGo</h2><p>图床废话了一大堆，接下来聊聊图床工具，图床工具的作用就是简化我上面说的废话，没错，只要通过工具，就可以自动上传图片，得到外链地址，是不是很激动。</p><p>于是经过一番 <del>搜索</del> 调研，我发现了<a href="https://picgo.github.io/PicGo-Doc/zh/" target="_blank" rel="noopener">PicGo</a>，支持拖拽，自动复制链接，上传方便，大家可以在官网下载，是轻便，开源，有保障的应用。顺便一提，这个好像是国人开发的，支持一波~</p><p>具体的下载，安装，设置，大家参照官网文档，没什么难度的，这里我就不介绍了。</p><p>这里需要讲一下图床设置中的<code>GitHub图床</code>，官方文档的配置如下：</p><p><img data-src="https://raw.githubusercontent.com/ChaosySama/ChaosySama.github.io/img/image-20200317153222449.png" alt="image-20200317153222449"></p><p>这里因为要和博客的放在同一个仓库中，所以可以提前在博客的仓库中新建一个<code>img</code>分支，用来保管上传的图片。然后上面设定分支名的时候设置为<code>img</code>，这样就不用担心博客部署之后，图片文件被覆盖的问题了，因为不在同一个分支上。</p><h2 id="结合"><a href="#结合" class="headerlink" title="结合"></a>结合</h2><p>通过上面的配置和使用，图床问题解决了，写作工具和图片上传问题也解决了，下面那么怎么让整个过程更一体化呢？这也是上面提到过的，推荐<code>Typora</code>的主因之一，它的设置中自带插入图片时上传功能，并且可以完美结合<code>PicGo</code>，只要你开启了<code>PicGo App</code>或者<code>PicGo cli</code>就可以在写作过程中自动上传图片到仓库。</p><p><img data-src="https://raw.githubusercontent.com/ChaosySama/ChaosySama.github.io/img/image-20200318093957720.png" alt="image-20200318093957720"></p><p>注意，如果上传图片失败，往往是没有使用相对路径，导致上传命令找不到图片所在位置，这时候勾选上就可以。记得设置完成后验证一下图片上传。</p><p>有时候会遇到怎么都上传不成功的情况，目前遇到的情况主要有2种：</p><ul><li><p>仓库中已有同名的图片。</p><p>这里可以打开<code>PicGo</code>设置中的<code>时间戳重命名</code>功能，因为我们暂时不整理图片仓库，所以不需要有意义的命名，如果以后想自主管理图片，到时候再研究更好的实践方案。</p></li><li><p>还有可能是<code>PicGo</code>的Server服务卡住了，只要重启一下<code>PicGo</code>就好。</p></li></ul><p>那么经过上面的设置，就可以开始愉快的写作啦，图片也是用到的时候直接截图或者拖进<code>Typora</code>就可以了，快去体验吧！</p><p>顺带推荐一下截图工具<a href="https://zh.snipaste.com/" target="_blank" rel="noopener">Snipaste</a>，用过的都说好！</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><span id="con">总结</span></h2><h4 id="Typora-PicGo的食用方法"><a href="#Typora-PicGo的食用方法" class="headerlink" title="Typora+PicGo的食用方法"></a>Typora+PicGo的食用方法</h4><ol><li>安装并配置<a href="https://picgo.github.io/PicGo-Doc/zh/" target="_blank" rel="noopener">PicGo</a>，使用<code>Github图床</code>，在博客的仓库创建<code>img</code>分支用于提交保存图片。</li><li>安装并配置<a href="https://www.typora.io" target="_blank" rel="noopener">Typora</a>，在配置中使用<code>PicGo</code>服务，实现在<code>Typora</code>中上传图片功能。</li><li>开吃。</li></ol><h4 id="不足和改进"><a href="#不足和改进" class="headerlink" title="不足和改进"></a>不足和改进</h4><ul><li><p>这篇文章解决了写作这一核心问题，但是写作完之后还是有一系列繁琐的生成部署行为需要手动执行。</p><p>之后会研究怎么使用Travis CI，来持续集成，保证我们只要专心写作就可以。</p></li><li><p>图床中的图片为了保证不重名，大部分以时间戳形式命名保存，这很不利于管理，并且没有划分日期文件夹，容易造成所有图片在同一目录下，造成视觉上和操作上的不便。</p><p>如果以后<code>PicGo</code>功能更新到可以支持上面按日期分目录上传的功能，那是最好的。</p><p>如果没有，可能需要研究其他的解决方案（如果需要管理图床的话）</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typora </tag>
            
            <tag> picgo </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中华二番-蒜香青椒土豆条</title>
      <link href="/20191003/meshi-qingjiao-potato/"/>
      <url>/20191003/meshi-qingjiao-potato/</url>
      
        <content type="html"><![CDATA[<p>最近发现，外卖点的多了，已经到了看见名字和图片就能尝到味道的境界了，莫非这就是传说中的通感？</p><a id="more"></a><p>而且，外卖的量，卫生程度都不太好控制，卫生暂按不表，量有时候真的有点多，对于我这个强迫症和节俭主义的人来说，浪费就是<del>亏了</del>可耻！所以往往吃完就撑到要死，而且平时也缺乏运动，所以体重蹭蹭蹭往上涨，已经回到了从日本回来的巅峰了。</p><p>所以，为了克服这些弊端，有时间的话，还是点一下厨艺技能好了。做起来虽然有些麻烦，不过吃上自己的菜，根据自己口味改进，还是很棒的不是吗？<del>其实点了一段时间了，现在才想起来发点blog 来记录一下。</del></p><p>这次我们来简单做一道家常菜——<strong>蒜香青椒土豆条</strong>。</p><p>有人问了，为啥不是<code>青椒土豆丝</code>而是<code>蒜香青椒土豆条</code>呢？首先，<del>土豆丝不好切</del>土豆条比起土豆丝吃起来更爽，也不容易糊锅之类的，翻炒更容易，加上蒜香主要是因为用的蒜末比较多，味道更佳。</p><p>那么，我们开始吧。</p><h3 id="食材准备"><a href="#食材准备" class="headerlink" title="食材准备"></a>食材准备</h3><table><thead><tr><th>食材</th><th>数量（1人份）</th></tr></thead><tbody><tr><td>香葱</td><td>1根，切成葱花</td></tr><tr><td>蒜</td><td>4瓣，切成蒜末</td></tr><tr><td>土豆</td><td>1块，切成土豆条（比土豆丝稍微宽一些，厚一些），放入盛有清水的碗中泡着</td></tr><tr><td>青椒</td><td>1个，切丝切片都可以</td></tr><tr><td>蚝油</td><td>1勺</td></tr><tr><td>生抽</td><td>1/2勺</td></tr><tr><td>糖</td><td>1茶匙</td></tr></tbody></table><p>注：上面的调料的数量是自己用的量，各位根据自己的口味调整，料理用的汤勺，茶匙之类的规格肯定都不一样，写成<code>少许</code>感觉又太暧昧，只要量适合自己就好。不过为了健康，记得少油少盐少糖哦。</p><h3 id="料理开始"><a href="#料理开始" class="headerlink" title="料理开始"></a>料理开始</h3><ol><li>锅中加入少量油（足以使土豆不粘锅就行），开中火，等油热了放入葱花和蒜末炒香。</li><li>将土豆条沥干水，放入锅中翻炒。</li><li>待土豆条内部由白色变透明些，加入蚝油和生抽，翻炒均匀。</li><li>加入青椒片/丝翻炒。</li><li>快出锅前，加入1茶匙糖，关火，翻炒均匀，即可出锅。</li></ol><p>（这里暂时没图<del>忘记拍了</del>，以后补上）</p><hr><p>一道家常菜就完成了，是不是很简单呢？</p><p>除去食材准备的时间，真正做的时间也就几分钟吧，还是很快的。</p><p>想吃清脆一些，2，3步骤的时间控制的短一些，想吃软糯一些，翻炒时间稍微长一些。因为是土豆条和中火，不用怕粘锅糊锅。</p><p>最后一步的糖是提鲜用的，可以让入口的时候带一些些甜味，不加也完全可以。</p><p>那么，今天就到这里了！</p>]]></content>
      
      
      <categories>
          
          <category> Food </category>
          
      </categories>
      
      
        <tags>
            
            <tag> food </tag>
            
            <tag> potato </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日谈9.26 </title>
      <link href="/20190926/mylife-19-9-26/"/>
      <url>/20190926/mylife-19-9-26/</url>
      
        <content type="html"><![CDATA[<p>连休了好几天，工作日在家休息什么的真是太爽了。</p><a id="more"></a><p>今天是在职的最后一天，离职手续办理起来意外的顺利<del>就是各种找人签字还债</del>，人事讲的很明白<del>虽然我还是比较懵逼</del>，资料也准备的很全，离职之后也可以随时询问情况，这点我还是对大 F 社很放心的。</p><p>忙碌了一会就离开了，走在路上计算了一下，入职到现在已经1547天了，看到数字着实吓了一跳，居然已经<del>荒废</del>这么久了，这突然的离开，还是有点舍不得的。其实如果我没有生活的种种压力，一个人生活的话，完全可以无忧无虑的在这里养老，这样至少还能保住头发不是。</p><p>不过，既然迈开了步伐，就不能再停下了，希望在身心被耗损之前，可以混到有个自己的天地。</p><p>接下来的几天，可以荒废一下了，当只猪吧，享受最后的快乐时光。</p>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
            <tag> leave </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日谈9.19</title>
      <link href="/20190919/mylife-19-9-19/"/>
      <url>/20190919/mylife-19-9-19/</url>
      
        <content type="html"><![CDATA[<h2 id="离职"><a href="#离职" class="headerlink" title="离职"></a>离职</h2><p>9号提的离职申请，中间中秋节请了3天假，这周回来上班。<br>今天离职流程终于到了人事，询问了一下剩余休假的事情，离职前没休完的也不会折现了。<br>目前剩余休假还剩4天，26号离职，于是我请了下午半天加周五和下周一二，一共3.5天。<br>下周三回去进行离职面谈和其他手续办理。</p><a id="more"></a><p>饭卡里剩的钱由于是餐补，不能取出，只能花了。只怪<del>公司食堂太难吃</del>之前一直在家里做饭吃，在公司食堂消费少了，所以每月餐补从来花不完。</p><p>走之前去公司超市买了两瓶饮料，两袋薯片，卡里剩余156元。顺便把卡交给同事，看看后面休假的几天能不能帮我再花一些。最后不行的话，只能取超市拎一箱牛奶了哈哈。</p><h2 id="银行卡开户"><a href="#银行卡开户" class="headerlink" title="银行卡开户"></a>银行卡开户</h2><p>出了公司，阳光灿烂，微风微凉，<del>非休息日不用上班就是爽！</del>想想离职的事情，还是顺道去办张储蓄卡吧（下家公司的工资卡。</p><p>由于指定了农行的，没办法，只能办农行卡了，办理的过程没啥好说的，办完发现他们给我自动卡通了每月2块钱的短信通知。我仔细想想现在用的中行卡，微信动帐提醒已经很即时了，短信通知什么的好鸡肋，而且居然还要钱，真恶心，就把短信通知服务关了。</p><p>出来之后我打开微信公众号，绑定手机号和银行卡，准备开通微信动帐提醒的时候，尴尬了，居然需要开通短信服务才能开通微信动帐提醒，这不是扯呢？合着就是要收钱呗，一年24也不贵，于是我想重新开启短信服务的时候，发现不能开，估计是刚开卡，信息还没同步到系统里，这就很尴尬了，如果过几天还不行的话，只能再去一趟营业厅了。<del>下次得换一家，免得让人家认出我来，太尴尬了</del></p><h2 id="社保卡"><a href="#社保卡" class="headerlink" title="社保卡"></a>社保卡</h2><p>回到家，想想明天去体检需要带的身份证和社保卡，突然想到，从毕业到现在4年了，公司发的社保卡我一直放在钱包里也没拿出来过<del>拿出来看过</del>，也没有去激活过，要是明天去医院用不了，岂不就尴尬了。</p><p>于是打电话咨询了一下<code>12333</code>，好像是只要公司一直缴纳保险就可以正常使用。还没有验证不太能确信，还是明天试一试吧，不行就下周一再去体检了，反正不用上班。</p><h2 id="感慨"><a href="#感慨" class="headerlink" title="感慨"></a>感慨</h2><p>毕业4年了，去日本待了1整年，都没有去过医院，也没有买过药，这是多么强悍的身体<del>虽然也没锻炼过，手无缚鸡之力</del>，大学四年也是，除了每年必定由鼻炎引起的感冒，还有一些小头疼小发烧，都睡一觉就好了，也就是大一军训时候摔伤了膝盖去过一次医院，之后都是陪朋友家人去医院，希望这样的身体也能一直陪伴我下去。</p><p>接下来应该是难熬的一段时间，晚上9点之后不能吃喝，明早6点多还得起来去医院体检，希望没什么问题<del>尿酸要低低低！我都一年没吃海鲜没喝啤酒了，再不低，我连豆制品都吃不了了！</del>，做饭去了，今天是青椒土豆丝+肉松小贝。</p>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
            <tag> bank </tag>
            
            <tag> security </tag>
            
            <tag> leave </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 搭建个人博客</title>
      <link href="/20190914/use-hexo-build-blog/"/>
      <url>/20190914/use-hexo-build-blog/</url>
      
        <content type="html"><![CDATA[<p>作为程序猿，总会有一些经验总结，想要写下来，方便以后自己回顾。但是本地的话，换个环境或者换个端，就没法即时查看了。之前一直使用的是 <code>oneNote</code>，多端同步，除了一些常见的诟病，其实还是很方便的，不过对于和别人分享来说，实在是不太方便。于是就想到用 <code>hexo</code>  +  <code>github page</code> 搭建一个免费的博客。既能写，又能定制，还能分享，最重要的是免费。</p><a id="more"></a><h2 id="hexo-的搭建"><a href="#hexo-的搭建" class="headerlink" title="hexo 的搭建"></a>hexo 的搭建</h2><p>网上已经有各种从零搭建教程，具体可以参考：</p><p><a href="https://zhuanlan.zhihu.com/p/35668237" target="_blank" rel="noopener">超详细Hexo+Github博客搭建小白教程</a></p><p><a href="https://zhuanlan.zhihu.com/p/26625249" target="_blank" rel="noopener">GitHub+Hexo 搭建个人网站详细教程</a></p><p>上面两个其实内容差不多，我也是参考这两个教程搭建的。中间有些步骤想跳就跳，比如绑定域名啥啥的，初期的话可以先用起来，等到后面~~弃坑了，就不用麻烦了有新的需求了，再加上也不迟嘛。</p><h2 id="主题的选择和优化"><a href="#主题的选择和优化" class="headerlink" title="主题的选择和优化"></a>主题的选择和优化</h2><p>搭建完成后，选择了一个比较大众的主题 <a href="https://theme-next.iissnan.com/" target="_blank" rel="noopener">Next</a> ，结合 Hexo 主题优化的教程：</p><p><a href="https://www.jianshu.com/p/efbeddc5eb19" target="_blank" rel="noopener">Hexo+Next个人博客主题优化</a></p><p>加一些方便的功能，修改一些样式之类的，总之自己觉得好用就好。拿不准的功能可以加上去看看，不好可以删嘛。</p><p>于是花点时间捣鼓捣鼓就变成现在这个样子了，不想花时间，直接开始写也可以，看各人喜好了。</p><h2 id="文章的编写和发布"><a href="#文章的编写和发布" class="headerlink" title="文章的编写和发布"></a>文章的编写和发布</h2><p>教程里写的很明白了，这里就不多描述了，总结下来就是下面几步：</p><pre class=" language-shell"><code class="language-shell">hexo n "new article"vim source/_posts/new-article.mdhexo g && hexo s</code></pre><p>就可以在本地浏览了。</p><p>然后</p><pre class=" language-shell"><code class="language-shell">hexo d</code></pre><p>就可以去 github 上浏览了。（需要过几分钟）</p>]]></content>
      
      
      <categories>
          
          <category> Tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
            <tag> next </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
